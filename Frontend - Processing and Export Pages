// src/app/(dashboard)/process/page.tsx
"use client"

import { useState } from "react"
import { useRouter } from "next/navigation"
import { useQuery, useMutation } from "@tanstack/react-query"
import { useDropzone } from "react-dropzone"
import {
  Upload,
  FileImage,
  Loader2,
  CheckCircle2,
  XCircle,
  AlertCircle,
  RotateCw,
} from "lucide-react"
import { Button } from "@/components/ui/button"
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { Progress } from "@/components/ui/progress"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { useToast } from "@/components/ui/use-toast"
import { api } from "@/lib/api"

interface ProcessingJob {
  id: string
  status: 'pending' | 'processing' | 'completed' | 'failed'
  gradeSheetName: string
  progress: number
  error?: string
  result?: any
}

export default function ProcessPage() {
  const router = useRouter()
  const { toast } = useToast()
  const [files, setFiles] = useState<File[]>([])
  const [ocrProvider, setOcrProvider] = useState<'vision' | 'claude'>('vision')
  const [processingJobs, setProcessingJobs] = useState<ProcessingJob[]>([])
  const [isProcessing, setIsProcessing] = useState(false)

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    accept: {
      'image/jpeg': ['.jpg', '.jpeg'],
      'image/png': ['.png']
    },
    onDrop: (acceptedFiles) => {
      setFiles(prev => [...prev, ...acceptedFiles])
    }
  })

  const { data: recentJobs, isLoading: jobsLoading } = useQuery({
    queryKey: ["processing-jobs"],
    queryFn: async () => {
      const response = await api.get("/process/jobs?limit=10")
      return response.data
    },
    refetchInterval: (data) => {
      // Refetch every 2 seconds if any job is processing
      const hasProcessing = data?.some((job: ProcessingJob) => 
        job.status === 'processing' || job.status === 'pending'
      )
      return hasProcessing ? 2000 : false
    }
  })

  const processMutation = useMutation({
    mutationFn: async () => {
      const formData = new FormData()
      files.forEach(file => {
        formData.append('gradeSheets', file)
      })
      formData.append('ocrProvider', ocrProvider)

      const response = await api.post('/process/upload', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
        onUploadProgress: (progressEvent) => {
          const progress = progressEvent.total
            ? Math.round((progressEvent.loaded * 100) / progressEvent.total)
            : 0
          // Update upload progress
        },
      })
      return response.data
    },
    onSuccess: (data) => {
      toast({
        title: "Processing started",
        description: `Processing ${data.jobs.length} grade sheet(s)`,
      })
      setFiles([])
      setProcessingJobs(data.jobs)
    },
    onError: (error: any) => {
      toast({
        title: "Processing failed",
        description: error.response?.data?.message || "Failed to start processing",
        variant: "destructive",
      })
    },
  })

  const retryJobMutation = useMutation({
    mutationFn: async (jobId: string) => {
      const response = await api.post(`/process/job/${jobId}/retry`)
      return response.data
    },
    onSuccess: () => {
      toast({
        title: "Retry started",
        description: "Processing job has been restarted",
      })
    },
  })

  const handleProcess = () => {
    if (files.length === 0) {
      toast({
        title: "No files selected",
        description: "Please select grade sheet images to process",
        variant: "destructive",
      })
      return
    }
    processMutation.mutate()
  }

  const removeFile = (index: number) => {
    setFiles(prev => prev.filter((_, i) => i !== index))
  }

  const getJobStatusIcon = (status: string) => {
    switch (status) {
      case 'completed':
        return <CheckCircle2 className="h-5 w-5 text-green-500" />
      case 'failed':
        return <XCircle className="h-5 w-5 text-red-500" />
      case 'processing':
        return <Loader2 className="h-5 w-5 text-blue-500 animate-spin" />
      default:
        return <AlertCircle className="h-5 w-5 text-yellow-500" />
    }
  }

  return (
    <div className="max-w-6xl mx-auto space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">Process Grade Sheets</h1>
        <p className="text-muted-foreground mt-2">
          Upload scanned grade sheets for automatic processing
        </p>
      </div>

      <div className="grid gap-6 lg:grid-cols-2">
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Upload Images</CardTitle>
              <CardDescription>
                Drag and drop or click to select scanned grade sheet images
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div
                {...getRootProps()}
                className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${
                  isDragActive ? 'border-primary bg-primary/5' : 'border-gray-300 hover:border-gray-400'
                }`}
              >
                <input {...getInputProps()} />
                <Upload className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <p className="text-sm text-gray-600">
                  {isDragActive
                    ? "Drop the images here"
                    : "Drag and drop grade sheet images, or click to select"}
                </p>
                <p className="text-xs text-gray-500 mt-2">
                  Supports JPEG and PNG images up to 50MB each
                </p>
              </div>

              {files.length > 0 && (
                <div className="space-y-2">
                  <p className="text-sm font-medium">Selected files:</p>
                  {files.map((file, index) => (
                    <div
                      key={index}
                      className="flex items-center justify-between p-2 bg-gray-50 rounded"
                    >
                      <div className="flex items-center gap-2">
                        <FileImage className="h-4 w-4 text-gray-500" />
                        <span className="text-sm">{file.name}</span>
                        <span className="text-xs text-gray-500">
                          ({(file.size / 1024 / 1024).toFixed(1)} MB)
                        </span>
                      </div>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => removeFile(index)}
                      >
                        Remove
                      </Button>
                    </div>
                  ))}
                </div>
              )}

              <div className="space-y-2">
                <label className="text-sm font-medium">OCR Provider</label>
                <Select value={ocrProvider} onValueChange={(value: any) => setOcrProvider(value)}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="vision">Google Vision (Fast, Standard)</SelectItem>
                    <SelectItem value="claude">Claude AI (Slower, Higher Accuracy)</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <Button
                className="w-full"
                onClick={handleProcess}
                disabled={files.length === 0 || processMutation.isPending}
              >
                {processMutation.isPending ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Processing...
                  </>
                ) : (
                  <>
                    <Upload className="mr-2 h-4 w-4" />
                    Process {files.length} Image{files.length !== 1 ? 's' : ''}
                  </>
                )}
              </Button>
            </CardContent>
          </Card>

          <Alert>
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>
              For best results, ensure images are clear, well-lit, and properly aligned.
              Each image should contain only one grade sheet.
            </AlertDescription>
          </Alert>
        </div>

        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Recent Processing Jobs</CardTitle>
              <CardDescription>
                View the status of your recent processing jobs
              </CardDescription>
            </CardHeader>
            <CardContent>
              {jobsLoading ? (
                <div className="space-y-3">
                  {[...Array(3)].map((_, i) => (
                    <div key={i} className="h-16 bg-gray-100 rounded animate-pulse" />
                  ))}
                </div>
              ) : recentJobs?.length > 0 ? (
                <div className="space-y-3">
                  {recentJobs.map((job: ProcessingJob) => (
                    <div
                      key={job.id}
                      className="flex items-center justify-between p-3 border rounded-lg"
                    >
                      <div className="flex items-center gap-3">
                        {getJobStatusIcon(job.status)}
                        <div>
                          <p className="text-sm font-medium">{job.gradeSheetName}</p>
                          <p className="text-xs text-gray-500">
                            {job.status === 'processing' 
                              ? `Processing... ${job.progress}%`
                              : job.status === 'failed'
                              ? job.error || 'Processing failed'
                              : job.status}
                          </p>
                        </div>
                      </div>
                      {job.status === 'failed' && (
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => retryJobMutation.mutate(job.id)}
                        >
                          <RotateCw className="h-3 w-3" />
                        </Button>
                      )}
                      {job.status === 'completed' && (
                        <Button
                          variant="outline"
                          size="sm"
                          asChild
                        >
                          <a href={`/process/results/${job.id}`}>View Results</a>
                        </Button>
                      )}
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-center text-gray-500 py-8">
                  No recent processing jobs
                </p>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}

// src/app/(dashboard)/export/page.tsx
"use client"

import { useState } from "react"
import { useQuery, useMutation } from "@tanstack/react-query"
import {
  Download,
  FileText,
  FileSpreadsheet,
  Mail,
  Calendar,
  Filter,
  Share2,
} from "lucide-react"
import { Button } from "@/components/ui/button"
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { Label } from "@/components/ui/label"
import { DatePickerWithRange } from "@/components/ui/date-range-picker"
import { Checkbox } from "@/components/ui/checkbox"
import { useToast } from "@/components/ui/use-toast"
import { api } from "@/lib/api"
import { addDays } from "date-fns"

export default function ExportPage() {
  const { toast } = useToast()
  const [selectedPeriods, setSelectedPeriods] = useState<string[]>([])
  const [selectedAssignments, setSelectedAssignments] = useState<string[]>([])
  const [dateRange, setDateRange] = useState({
    from: addDays(new Date(), -30),
    to: new Date(),
  })
  const [exportFormat, setExportFormat] = useState<'csv' | 'pdf' | 'sheets'>('csv')

  const { data: periods } = useQuery({
    queryKey: ["periods"],
    queryFn: async () => {
      const response = await api.get("/periods")
      return response.data
    },
  })

  const { data: assignments } = useQuery({
    queryKey: ["assignments", dateRange],
    queryFn: async () => {
      const params = new URLSearchParams({
        startDate: dateRange.from.toISOString(),
        endDate: dateRange.to.toISOString(),
      })
      const response = await api.get(`/assignments?${params}`)
      return response.data
    },
  })

  const exportMutation = useMutation({
    mutationFn: async (format: string) => {
      const params = {
        periodIds: selectedPeriods,
        assignmentIds: selectedAssignments,
        startDate: dateRange.from.toISOString(),
        endDate: dateRange.to.toISOString(),
      }

      if (format === 'csv') {
        const response = await api.get('/export/csv', {
          params,
          responseType: 'blob'
        })
        return { format: 'csv', data: response.data }
      } else if (format === 'pdf') {
        const response = await api.get('/export/pdf/report', {
          params: { ...params, periodId: selectedPeriods[0] },
          responseType: 'blob'
        })
        return { format: 'pdf', data: response.data }
      } else if (format === 'sheets') {
        const response = await api.post('/export/google-sheets', {
          ...params,
          createNew: true
        })
        return { format: 'sheets', data: response.data }
      }
    },
    onSuccess: (result) => {
      if (result?.format === 'sheets') {
        toast({
          title: "Export successful",
          description: "Data exported to Google Sheets",
        })
        window.open(result.data.spreadsheetUrl, '_blank')
      } else if (result?.data) {
        // Download file
        const url = window.URL.createObjectURL(new Blob([result.data]))
        const link = document.createElement('a')
        link.href = url
        const filename = result.format === 'csv' 
          ? `grades-export-${Date.now()}.csv`
          : `grade-report-${Date.now()}.pdf`
        link.setAttribute('download', filename)
        document.body.appendChild(link)
        link.click()
        link.remove()
        
        toast({
          title: "Export successful",
          description: `Downloaded ${result.format.toUpperCase()} file`,
        })
      }
    },
    onError: (error: any) => {
      toast({
        title: "Export failed",
        description: error.response?.data?.message || "Failed to export data",
        variant: "destructive",
      })
    },
  })

  const handleExport = () => {
    if (selectedPeriods.length === 0) {
      toast({
        title: "No periods selected",
        description: "Please select at least one period to export",
        variant: "destructive",
      })
      return
    }
    exportMutation.mutate(exportFormat)
  }

  return (
    <div className="max-w-6xl mx-auto space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">Export Grades</h1>
        <p className="text-muted-foreground mt-2">
          Export your grade data in various formats
        </p>
      </div>

      <div className="grid gap-6 lg:grid-cols-3">
        <div className="lg:col-span-2 space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Filter Data</CardTitle>
              <CardDescription>
                Select the data you want to export
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label>Date Range</Label>
                <DatePickerWithRange
                  value={dateRange}
                  onChange={setDateRange}
                />
              </div>

              <div className="space-y-2">
                <Label>Select Periods</Label>
                <div className="grid grid-cols-2 gap-3">
                  {periods?.map((period: any) => (
                    <label
                      key={period.id}
                      className="flex items-center space-x-2 cursor-pointer"
                    >
                      <Checkbox
                        checked={selectedPeriods.includes(period.id)}
                        onCheckedChange={(checked) => {
                          if (checked) {
                            setSelectedPeriods([...selectedPeriods, period.id])
                          } else {
                            setSelectedPeriods(
                              selectedPeriods.filter((id) => id !== period.id)
                            )
                          }
                        }}
                      />
                      <span className="text-sm">{period.name}</span>
                    </label>
                  ))}
                </div>
              </div>

              {assignments && assignments.length > 0 && (
                <div className="space-y-2">
                  <Label>Select Assignments (Optional)</Label>
                  <div className="max-h-48 overflow-y-auto border rounded p-3">
                    {assignments.map((assignment: any) => (
                      <label
                        key={assignment.id}
                        className="flex items-center space-x-2 cursor-pointer py-1"
                      >
                        <Checkbox
                          checked={selectedAssignments.includes(assignment.id)}
                          onCheckedChange={(checked) => {
                            if (checked) {
                              setSelectedAssignments([...selectedAssignments, assignment.id])
                            } else {
                              setSelectedAssignments(
                                selectedAssignments.filter((id) => id !== assignment.id)
                              )
                            }
                          }}
                        />
                        <span className="text-sm">{assignment.name}</span>
                      </label>
                    ))}
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Export Options</CardTitle>
              <CardDescription>
                Choose your export format
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-3">
                <label className="flex items-center space-x-3 cursor-pointer">
                  <input
                    type="radio"
                    value="csv"
                    checked={exportFormat === 'csv'}
                    onChange={(e) => setExportFormat(e.target.value as any)}
                    className="w-4 h-4"
                  />
                  <FileSpreadsheet className="h-5 w-5 text-gray-500" />
                  <div>
                    <p className="font-medium">CSV File</p>
                    <p className="text-xs text-gray-500">
                      Compatible with Excel, Google Sheets
                    </p>
                  </div>
                </label>

                <label className="flex items-center space-x-3 cursor-pointer">
                  <input
                    type="radio"
                    value="pdf"
                    checked={exportFormat === 'pdf'}
                    onChange={(e) => setExportFormat(e.target.value as any)}
                    className="w-4 h-4"
                  />
                  <FileText className="h-5 w-5 text-gray-500" />
                  <div>
                    <p className="font-medium">PDF Report</p>
                    <p className="text-xs text-gray-500">
                      Formatted grade report
                    </p>
                  </div>
                </label>

                <label className="flex items-center space-x-3 cursor-pointer">
                  <input
                    type="radio"
                    value="sheets"
                    checked={exportFormat === 'sheets'}
                    onChange={(e) => setExportFormat(e.target.value as any)}
                    className="w-4 h-4"
                  />
                  <Share2 className="h-5 w-5 text-gray-500" />
                  <div>
                    <p className="font-medium">Google Sheets</p>
                    <p className="text-xs text-gray-500">
                      Export directly to Google Sheets
                    </p>
                  </div>
                </label>
              </div>

              <Button
                className="w-full"
                onClick={handleExport}
                disabled={exportMutation.isPending || selectedPeriods.length === 0}
              >
                {exportMutation.isPending ? (
                  "Exporting..."
                ) : (
                  <>
                    <Download className="mr-2 h-4 w-4" />
                    Export Data
                  </>
                )}
              </Button>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Quick Actions</CardTitle>
            </CardHeader>
            <CardContent className="space-y-2">
              <Button variant="outline" className="w-full justify-start">
                <Mail className="mr-2 h-4 w-4" />
                Email Grade Reports
              </Button>
              <Button variant="outline" className="w-full justify-start">
                <Calendar className="mr-2 h-4 w-4" />
                Schedule Export
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}
